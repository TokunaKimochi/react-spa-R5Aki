import antfu from '@antfu/eslint-config';
import pluginQuery from '@tanstack/eslint-plugin-query';
import jsxA11y from 'eslint-plugin-jsx-a11y';

export default antfu({
  type: 'app',
  react: true,
  typescript: {
    parserOptions: {
      projectService: true,
      tsconfigRootDir: import.meta.dirname,
    },
    overrides: {
      // recommended-type-checked
      'ts/await-thenable': 'error',
      'ts/ban-ts-comment': 'error',
      'no-array-constructor': 'off',
      'ts/no-array-constructor': 'error',
      'ts/no-array-delete': 'error',
      'ts/no-base-to-string': 'error',
      'ts/no-duplicate-enum-values': 'error',
      'ts/no-duplicate-type-constituents': 'error',
      'ts/no-empty-object-type': 'error',
      'ts/no-explicit-any': 'error',
      'ts/no-extra-non-null-assertion': 'error',
      'ts/no-floating-promises': 'error',
      'ts/no-for-in-array': 'error',
      'no-implied-eval': 'off',
      'ts/no-implied-eval': 'error',
      'ts/no-misused-new': 'error',
      'ts/no-misused-promises': 'error',
      'ts/no-namespace': 'error',
      'ts/no-non-null-asserted-optional-chain': 'error',
      'ts/no-redundant-type-constituents': 'error',
      'ts/no-require-imports': 'error',
      'ts/no-this-alias': 'error',
      'ts/no-unnecessary-type-assertion': 'error',
      'ts/no-unnecessary-type-constraint': 'error',
      'ts/no-unsafe-argument': 'error',
      'ts/no-unsafe-assignment': 'error',
      'ts/no-unsafe-call': 'error',
      'ts/no-unsafe-declaration-merging': 'error',
      'ts/no-unsafe-enum-comparison': 'error',
      'ts/no-unsafe-function-type': 'error',
      'ts/no-unsafe-member-access': 'error',
      'ts/no-unsafe-return': 'error',
      'ts/no-unsafe-unary-minus': 'error',
      'no-unused-expressions': 'off',
      'ts/no-unused-expressions': 'error',
      'no-unused-vars': 'off',
      'ts/no-unused-vars': 'error',
      'ts/no-wrapper-object-types': 'error',
      'no-throw-literal': 'off',
      'ts/only-throw-error': 'error',
      'ts/prefer-as-const': 'error',
      'ts/prefer-namespace-keyword': 'error',
      'prefer-promise-reject-errors': 'off',
      'ts/prefer-promise-reject-errors': 'error',
      'require-await': 'off',
      'ts/require-await': 'error',
      'ts/restrict-plus-operands': 'error',
      'ts/restrict-template-expressions': 'error',
      'ts/triple-slash-reference': 'error',
      'ts/unbound-method': 'error',
      // stylistic-type-checked
      'ts/adjacent-overload-signatures': 'error',
      'ts/array-type': 'error',
      'ts/ban-tslint-comment': 'error',
      'ts/class-literal-property-style': 'error',
      'ts/consistent-generic-constructors': 'error',
      'ts/consistent-indexed-object-style': 'error',
      'ts/consistent-type-assertions': 'error',
      'ts/consistent-type-definitions': 'error',
      'dot-notation': 'off',
      'ts/dot-notation': 'error',
      'ts/no-confusing-non-null-assertion': 'error',
      'no-empty-function': 'off',
      'ts/no-empty-function': 'error',
      'ts/no-inferrable-types': 'error',
      'ts/non-nullable-type-assertion-style': 'error',
      'ts/prefer-find': 'error',
      'ts/prefer-for-of': 'error',
      'ts/prefer-function-type': 'error',
      'ts/prefer-includes': 'error',
      'ts/prefer-nullish-coalescing': 'error',
      'ts/prefer-optional-chain': 'error',
      'ts/prefer-regexp-exec': 'error',
      'ts/prefer-string-starts-ends-with': 'error',
    },
  },
  formatters: true,
  stylistic: {
    indent: 2,
    semi: true,
    quotes: 'single',
  },
  ignores: ['dist', 'public', 'styled-system', 'src/assets', 'src/mocks/dummy-data'],
}, {
  rules: {
    'ts/no-redeclare': 'off',
    'no-console': 'off',
    'no-restricted-syntax': [
      'error',
      {
        selector: "CallExpression[callee.object.name='console'][callee.property.name!=/^(log|warn|error|info|trace)$/]",
        message: 'Unexpected property on console object was called',
      },
    ],
    'antfu/no-top-level-await': ['off'],
    'node/prefer-global/process': ['off'],
    'node/no-process-env': ['error'],
    'perfectionist/sort-imports': ['error', {
      tsconfigRootDir: '.',
    }],
    'style/operator-linebreak': ['error', 'after', { overrides: { '?': 'before', ':': 'before' } }],
    'style/quotes': ['error', 'single', { avoidEscape: true }],
    'style/quote-props': ['error', 'as-needed'],
    'unicorn/filename-case': ['error', {
      case: 'camelCase',
      ignore: ['README.md', 'vite-env.d.ts'],
    }],
  },
}, {
  files: ['**/*.{jsx,tsx}'],
  rules: {
    'unicorn/filename-case': ['error', {
      case: 'pascalCase',
    }],
  },
}, {
  files: ['**/*.{js,cjs,mjs,jsx,ts,cts,mts,tsx}'],
  ...jsxA11y.flatConfigs.recommended,
}, {
  files: ['**/*.{js,cjs,mjs,jsx,ts,cts,mts,tsx}'],
  plugins: {
    '@tanstack/query': pluginQuery,
  },
  rules: {
    // flat/recommended
    '@tanstack/query/exhaustive-deps': 'error',
    '@tanstack/query/no-rest-destructuring': 'warn',
    '@tanstack/query/stable-query-client': 'error',
    '@tanstack/query/no-unstable-deps': 'error',
    '@tanstack/query/infinite-query-property-order': 'error',
  },
});
